const _ = require('lodash')
const { fetchCase } = require('../test-helper')
const { JsonToCrystal, UnsupportedTypeError } = require('../../src/')

describe('JsonToCrystal', () => {

  test('Initializes successfully', () => {
    const j2c = new JsonToCrystal()
    expect(j2c instanceof JsonToCrystal).toBe(true)
    expect(j2c.options.baseClassName).toBe('AutoGenerated')
  })

  test('Sets options', () => {
    const options = {
      baseClassName: 'BaseClass',
      baseIndent: 2,
      allNilable: true,
      compact: true
    }

    const j2c = new JsonToCrystal(options)
    expect(j2c.options.baseClassName).toBe(options.baseClassName)
    expect(j2c.options.baseIndent).toBe(options.baseIndent)
    expect(j2c.options.allNilable).toBe(options.allNilable)
    expect(j2c.options.compact).toBe(options.compact)
  })

  test('Throws error with unsupported type', () => {
    const j2c = new JsonToCrystal()
    try {
      const output = j2c.parse(42)
    } catch (e) {
      expect(e instanceof UnsupportedTypeError).toBe(true)
      expect(e.message).toBe('Unsupported data type number.')
    }
  })

  test('Deserializes simple JSON structures', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('simple-class')
    const output = j2c.parse(testCase.json)
    expect(output).toBe(testCase.crystal)
  })

  test('Differentiates Int32, Int64, and Float64', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('numbers')
    const output = j2c.parse(testCase.json)
    expect(output).toBe(testCase.crystal)
  })

  test('Creates arrays with unions', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('array-unions')
    const output = j2c.parse(testCase.json)
    expect(output).toBe(testCase.crystal)
  })

  test('Creates multidimentional arrays', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('ndarray')
    const output = j2c.parse(testCase.json)
    expect(output).toBe(testCase.crystal)
  })

  // TODO: Find a better way to run this test
  test('Creates top level array with classes', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('array-nested-class')
    const input = j2c.parse(testCase.json).replace(/AryCls\d+/g, 'AryCls')
    const output = testCase.crystal.replace(/AryCls\d+/g, 'AryCls')
    expect(input).toBe(output)
  })

  test('Creates top level array with standard unions', () => {
    const j2c = new JsonToCrystal()
    const testCase = fetchCase('top-level-array')
    const input = j2c.parse(testCase.json)
    const output = testCase.crystal
    expect(input).toBe(output)
  })

})
