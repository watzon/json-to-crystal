"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
}
if (!String.prototype.repeat) {
    String.prototype.repeat = function (count) {
        'use strict';
        if (this == null) {
            throw new TypeError('can\'t convert ' + this + ' to object');
        }
        var str = '' + this;
        count = +count;
        if (count != count) {
            count = 0;
        }
        if (count < 0) {
            throw new RangeError('repeat count must be non-negative');
        }
        if (count == Infinity) {
            throw new RangeError('repeat count must be less than infinity');
        }
        count = Math.floor(count);
        if (str.length == 0 || count == 0) {
            return '';
        }
        // Ensuring count is a 31-bit integer allows us to heavily optimize the
        // main part. But anyway, most current (August 2014) browsers can't handle
        // strings 1 << 28 chars or longer, so:
        if (str.length * count >= 1 << 28) {
            throw new RangeError('repeat count must not overflow maximum string size');
        }
        var rpt = '';
        for (var i = 0; i < count; i++) {
            rpt += str;
        }
        return rpt;
    };
}
/*
    JSON to Crystal
    Copyright Â© 2018 Christopher Watson

    This script converts a JSON input into a series of Crystal classes with
    JSON mappings defined.
*/
define("json-to-crystal", ["require", "exports", "lodash", "./string"], function (require, exports, lodash_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    lodash_1 = __importDefault(lodash_1);
    var JsonParseError = /** @class */ (function (_super) {
        __extends(JsonParseError, _super);
        function JsonParseError() {
            return _super.call(this, 'Failed to parse JSON') || this;
        }
        return JsonParseError;
    }(Error));
    var JsonToCrystal = /** @class */ (function () {
        function JsonToCrystal(_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.baseClass, baseClass = _c === void 0 ? 'AutoGenerated' : _c, _d = _b.allNilable, allNilable = _d === void 0 ? false : _d;
            this.baseClass = baseClass;
            this.allNilable = allNilable;
        }
        JsonToCrystal.prototype.parse = function (scope) {
            var data = JSON.parse(scope.replace(/\.0/g, '.1'));
            return this.parseScope(data);
        };
        JsonToCrystal.prototype.parseScope = function (scope) {
            var crystal = '';
            if (lodash_1.default.isObjectLike(scope) && !lodash_1.default.isNull(scope)) {
                if (lodash_1.default.isArray(scope)) {
                    // Array
                    crystal += this.arrayType(scope);
                }
                else {
                    // Class, NamedTuple, or Hash
                    crystal += this.parseClass(this.baseClass, scope);
                }
            }
            else {
                // Non-key/value type
                crystal += this.crystalType(scope);
            }
            return crystal;
        };
        JsonToCrystal.prototype.parseClass = function (name, scope, indentLevel) {
            var _this = this;
            if (indentLevel === void 0) { indentLevel = 0; }
            if (name.charAt(0).match(/[a-z]/))
                name = lodash_1.default.upperFirst(lodash_1.default.camelCase(name));
            var subclasses = {};
            var str = '';
            str = this.indent(indentLevel);
            str += "class " + name + "\n\n";
            str += this.indent(++indentLevel);
            str += 'JSON.mapping({\n';
            ++indentLevel;
            var keys = Object.keys(scope);
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var key = keys_1[_i];
                var formattedKey = this.format(key);
                str += this.indent(indentLevel);
                str += formattedKey + ": { ";
                if (key !== formattedKey) {
                    // Key was changed
                    str += "key: \"" + key + "\", ";
                }
                if (this.allNilable) {
                    str += 'nilable: true, ';
                }
                var kind = this.crystalType(scope[key]);
                if (kind === 'class') {
                    subclasses[key] = scope[key];
                    str += "type: " + key + " },\n";
                }
                else {
                    str += "type: " + this.parseScope(scope[key]) + " },\n";
                }
            }
            str += this.indent(--indentLevel);
            str += '})\n\n';
            str += Object.keys(subclasses)
                .map(function (sc) { return _this.parseClass(sc, subclasses[sc], indentLevel); })
                .join("\n\n");
            str += this.indent(--indentLevel);
            str += "end\n";
            return str;
        };
        JsonToCrystal.prototype.indent = function (tabs) {
            if (tabs <= 0)
                return '';
            return '  '.repeat(tabs);
        };
        JsonToCrystal.prototype.format = function (str) {
            if (!str) {
                return '';
            }
            else if (str.match(/^\d+$/)) {
                // Identifier is a number
                str = 'num' + str;
            }
            else if (str.charAt(0).match(/\d/)) {
                // First character is a number
                var numbers = {
                    '0': 'zero_', '1': 'one_', '2': 'two_', '3': 'three_',
                    '4': 'four_', '5': 'five_', '6': 'six_', '7': 'seven_',
                    '8': 'eight_', '9': 'nine_'
                };
                str = numbers[str.charAt(0)] + str.substr(1);
            }
            return lodash_1.default.snakeCase(str);
        };
        JsonToCrystal.prototype.crystalType = function (val) {
            if (val === null)
                return 'JSON::Any';
            switch (typeof val) {
                case 'string':
                    return 'String';
                case 'number':
                    if (val % 1 === 0) {
                        // Regular integer
                        if (val > -2147483648 && val < 2147483647)
                            return 'Int32';
                        else
                            return 'Int64';
                    }
                    else {
                        // Float
                        return 'Float64';
                    }
                case 'boolean':
                    return 'Bool';
                case 'object':
                    if (lodash_1.default.isArray(val))
                        return this.arrayType(val);
                    return 'class';
                default:
                    return 'JSON::Any';
            }
        };
        JsonToCrystal.prototype.arrayType = function (arr) {
            var _this = this;
            var types = arr.map(function (v) { return _this.parseScope(v); });
            var unique = lodash_1.default.uniq(types);
            if (unique.length === 0)
                unique.push("JSON::Any");
            var union = unique.join(" | ");
            return "Array(" + union + ")";
        };
        return JsonToCrystal;
    }());
    var jsonToCrystal = new JsonToCrystal();
    var json = "\n{\n  \"Id\" : \"sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c\",\n  \"Container\" : \"cb91e48a60d01f1e27028b4fc6819f4f290b3cf12496c8176ec714d0d390984a\",\n  \"Comment\" : \"\",\n  \"Os\" : \"linux\",\n  \"Architecture\" : \"amd64\",\n  \"Parent\" : \"sha256:91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n  \"ContainerConfig\" : {\n     \"Tty\" : false,\n     \"Hostname\" : \"e611e15f9c9d\",\n     \"Volumes\" : null,\n     \"Domainname\" : \"\",\n     \"AttachStdout\" : false,\n     \"PublishService\" : \"\",\n     \"AttachStdin\" : false,\n     \"OpenStdin\" : false,\n     \"StdinOnce\" : false,\n     \"NetworkDisabled\" : false,\n     \"OnBuild\" : [],\n     \"Image\" : \"91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n     \"User\" : \"\",\n     \"WorkingDir\" : \"\",\n     \"Entrypoint\" : null,\n     \"MacAddress\" : \"\",\n     \"AttachStderr\" : false,\n     \"Labels\" : {\n        \"com.example.license\" : \"GPL\",\n        \"com.example.version\" : \"1.0\",\n        \"com.example.vendor\" : \"Acme\"\n     },\n     \"Env\" : [\n        \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n     ],\n     \"ExposedPorts\" : null,\n     \"Cmd\" : [\n        \"/bin/sh\",\n        \"-c\",\n        \"#(nop) LABEL com.example.vendor=Acme com.example.license=GPL com.example.version=1.0\"\n     ]\n  },\n  \"DockerVersion\" : \"1.9.0-dev\",\n  \"VirtualSize\" : 188359297,\n  \"Size\" : 0,\n  \"Author\" : \"\",\n  \"Created\" : \"2015-09-10T08:30:53.26995814Z\",\n  \"GraphDriver\" : {\n     \"Name\" : \"aufs\",\n     \"Data\" : null\n  },\n  \"RepoDigests\" : [\n     \"localhost:5000/test/busybox/example@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf\"\n  ],\n  \"RepoTags\" : [\n     \"example:1.0\",\n     \"example:latest\",\n     \"example:stable\"\n  ],\n  \"Config\" : {\n     \"Image\" : \"91e54dfb11794fad694460162bf0cb0a4fa710cfa3f60979c177d920813e267c\",\n     \"NetworkDisabled\" : false,\n     \"OnBuild\" : [],\n     \"StdinOnce\" : false,\n     \"PublishService\" : \"\",\n     \"AttachStdin\" : false,\n     \"OpenStdin\" : false,\n     \"Domainname\" : \"\",\n     \"AttachStdout\" : false,\n     \"Tty\" : false,\n     \"Hostname\" : \"e611e15f9c9d\",\n     \"Volumes\" : null,\n     \"Cmd\" : [\n        \"/bin/bash\"\n     ],\n     \"ExposedPorts\" : null,\n     \"Env\" : [\n        \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n     ],\n     \"Labels\" : {\n        \"com.example.vendor\" : \"Acme\",\n        \"com.example.version\" : \"1.0\",\n        \"com.example.license\" : \"GPL\"\n     },\n     \"Entrypoint\" : null,\n     \"MacAddress\" : \"\",\n     \"AttachStderr\" : false,\n     \"WorkingDir\" : \"\",\n     \"User\" : \"\"\n  },\n  \"RootFS\": {\n      \"Type\": \"layers\",\n      \"Layers\": [\n          \"sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6\",\n          \"sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef\"\n      ]\n  }\n}";
    var cls = jsonToCrystal.parse(json);
    console.log(cls);
});
//# sourceMappingURL=json-to-crystal.js.map